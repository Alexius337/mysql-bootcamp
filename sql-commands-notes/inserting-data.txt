INSERT INTO cats(name, age)
VALUES ('Jetson', 7);

Inserting Data

The "formula":
INSERT INTO table_name(column_name) VALUES (data);

For example:
INSERT INTO cats(name, age) VALUES ('Jetson', 7);

View the inserted data:
SELECT * FROM cats;

Multiple inserts:
INSERT INTO table_name 
      (column_name, 
       column_name) 
VALUES (value, value), 
       (value, value), 
       (value, value);

How to insert a string (VARCHAR) value that contains quotations:
Escape the quotes with a backslash: 
"This text has \"quotes\" in it" or 'This text has \'quotes\' in it'

Alternate single and double quotes: 
"This text has 'quotes' in it" or 'This text has "quotes" in it'

MySQL Warnings Code
DESC cats; 

Try Inserting a cat with a super long name:
INSERT INTO cats(name, age)
VALUES('This is some text blah blah blah blah blah text text text something about cats lalalalal meowwwwwwwwwww', 10);

Then view the warning:
SHOW WARNINGS; 


NULL and NOT NULL Code
Try inserting a cat without an age:
INSERT INTO cats(name) VALUES('Alabama'); 
SELECT * FROM cats; 

Try inserting a nameless and ageless cat:
INSERT INTO cats() VALUES(); 

Define a new cats2 table with NOT NULL constraints:

CREATE TABLE cats2
  (
    name VARCHAR(100) NOT NULL,
    age INT NOT NULL
  );
DESC cats2; 

Now try inserting an ageless cat:
INSERT INTO cats2(name) VALUES('Texas'); 

View the new warnings:
SHOW WARNINGS; 
SELECT * FROM cats2; 

Do the same for a nameless cat:
INSERT INTO cats2(age) VALUES(7); 
SHOW WARNINGS;


CODE: Setting Default Values 
Define a table with a DEFAULT name specified:

CREATE TABLE cats3
  (
    name VARCHAR(20) DEFAULT 'no name provided',
    age INT DEFAULT 99
  );
Notice the change when you describe the table:
DESC cats3; 

Insert a cat without a name:
INSERT INTO cats3(age) VALUES(13); 

Or a nameless, ageless cat:
INSERT INTO cats3() VALUES(); 

Combine NOT NULL and DEFAULT:
CREATE TABLE cats4
  (
    name VARCHAR(20) NOT NULL DEFAULT 'unnamed',
    age INT NOT NULL DEFAULT 99
  );
  
Notice The Difference:
INSERT INTO cats() VALUES();
SELECT * FROM cats;

INSERT INTO cats3() VALUES();
SELECT * FROM cats3;

INSERT INTO cats3(name, age) VALUES('Montana', NULL);
SELECT * FROM cats3;

INSERT INTO cats4(name, age) VALUES('Cali', NULL);
SELECT * FROM cats4;


CODE: Primary Keys

Define a table with a PRIMARY KEY constraint:
CREATE TABLE unique_cats
  (
    cat_id INT NOT NULL,
    name VARCHAR(100),
    age INT,
    PRIMARY KEY (cat_id)
  );
DESC unique_cats; 

Insert some new cats:
INSERT INTO unique_cats(cat_id, name, age) VALUES(1, 'Fred', 23);
INSERT INTO unique_cats(cat_id, name, age) VALUES(2, 'Louise', 3);
INSERT INTO unique_cats(cat_id, name, age) VALUES(1, 'James', 3);

Notice what happens:
SELECT * FROM unique_cats; 

Adding in AUTO_INCREMENT:
CREATE TABLE unique_cats2 (
    cat_id INT NOT NULL AUTO_INCREMENT,
    name VARCHAR(100),
    age INT,
    PRIMARY KEY (cat_id)
);

INSERT a couple new cats:
INSERT INTO unique_cats2(name, age) VALUES('Skippy', 4);
INSERT INTO unique_cats2(name, age) VALUES('Jiff', 3);
INSERT INTO unique_cats2(name, age) VALUES('Jiff', 3);
INSERT INTO unique_cats2(name, age) VALUES('Jiff', 3);
INSERT INTO unique_cats2(name, age) VALUES('Skippy', 4);

Notice the difference:
SELECT * FROM unique_cats2;